// Code generated by mockery v2.26.1. DO NOT EDIT.

package todos

import (
	context "context"

	domain "github.com/stackus/todos-htmx-wasm/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, description
func (_m *MockService) Add(ctx context.Context, description string) (*domain.Todo, error) {
	ret := _m.Called(ctx, description)

	var r0 *domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Todo, error)); ok {
		return rf(ctx, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Todo); ok {
		r0 = rf(ctx, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockService_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - description string
func (_e *MockService_Expecter) Add(ctx interface{}, description interface{}) *MockService_Add_Call {
	return &MockService_Add_Call{Call: _e.mock.On("Add", ctx, description)}
}

func (_c *MockService_Add_Call) Run(run func(ctx context.Context, description string)) *MockService_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_Add_Call) Return(_a0 *domain.Todo, _a1 error) *MockService_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Add_Call) RunAndReturn(run func(context.Context, string) (*domain.Todo, error)) *MockService_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockService) Get(ctx context.Context, id uuid.UUID) (*domain.Todo, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Todo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockService_Expecter) Get(ctx interface{}, id interface{}) *MockService_Get_Call {
	return &MockService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockService_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_Get_Call) Return(_a0 *domain.Todo, _a1 error) *MockService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.Todo, error)) *MockService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, id
func (_m *MockService) Remove(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockService_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockService_Expecter) Remove(ctx interface{}, id interface{}) *MockService_Remove_Call {
	return &MockService_Remove_Call{Call: _e.mock.On("Remove", ctx, id)}
}

func (_c *MockService_Remove_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockService_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_Remove_Call) Return(_a0 error) *MockService_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Remove_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockService_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, search
func (_m *MockService) Search(ctx context.Context, search string) ([]*domain.Todo, error) {
	ret := _m.Called(ctx, search)

	var r0 []*domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Todo, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Todo); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - search string
func (_e *MockService_Expecter) Search(ctx interface{}, search interface{}) *MockService_Search_Call {
	return &MockService_Search_Call{Call: _e.mock.On("Search", ctx, search)}
}

func (_c *MockService_Search_Call) Run(run func(ctx context.Context, search string)) *MockService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_Search_Call) Return(_a0 []*domain.Todo, _a1 error) *MockService_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Search_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Todo, error)) *MockService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Sort provides a mock function with given fields: ctx, ids
func (_m *MockService) Sort(ctx context.Context, ids []uuid.UUID) ([]*domain.Todo, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*domain.Todo, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*domain.Todo); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Sort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sort'
type MockService_Sort_Call struct {
	*mock.Call
}

// Sort is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *MockService_Expecter) Sort(ctx interface{}, ids interface{}) *MockService_Sort_Call {
	return &MockService_Sort_Call{Call: _e.mock.On("Sort", ctx, ids)}
}

func (_c *MockService_Sort_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *MockService_Sort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockService_Sort_Call) Return(_a0 []*domain.Todo, _a1 error) *MockService_Sort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Sort_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*domain.Todo, error)) *MockService_Sort_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, completed, description
func (_m *MockService) Update(ctx context.Context, id uuid.UUID, completed bool, description string) (*domain.Todo, error) {
	ret := _m.Called(ctx, id, completed, description)

	var r0 *domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, string) (*domain.Todo, error)); ok {
		return rf(ctx, id, completed, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, string) *domain.Todo); ok {
		r0 = rf(ctx, id, completed, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool, string) error); ok {
		r1 = rf(ctx, id, completed, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - completed bool
//   - description string
func (_e *MockService_Expecter) Update(ctx interface{}, id interface{}, completed interface{}, description interface{}) *MockService_Update_Call {
	return &MockService_Update_Call{Call: _e.mock.On("Update", ctx, id, completed, description)}
}

func (_c *MockService_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, completed bool, description string)) *MockService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool), args[3].(string))
	})
	return _c
}

func (_c *MockService_Update_Call) Return(_a0 *domain.Todo, _a1 error) *MockService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, bool, string) (*domain.Todo, error)) *MockService_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
